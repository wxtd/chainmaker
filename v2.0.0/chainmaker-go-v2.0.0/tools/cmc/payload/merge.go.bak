/*
Copyright (C) BABEC. All rights reserved.
Copyright (C) THL A29 Limited, a Tencent company. All rights reserved.

SPDX-License-Identifier: Apache-2.0
*/

package payload

import (
	"bytes"
	"fmt"
	"io/ioutil"

	sdkPbCommon "chainmaker.org/chainmaker/pb-go/v2/common"

	"github.com/gogo/protobuf/proto"
	"github.com/spf13/cobra"
)

const LOAD_FILE_ERROR_FORMAT = "Load file %s error: %s"
const ENDORSEMENT_INVALID_FORMAT = "Endorsement invalid: %s"

var (
	mergeInputs []string
	mergeOutput string
)

func mergeCMD() *cobra.Command {
	mergeCmd := &cobra.Command{
		Use:   "merge",
		Short: "Merge pb file command",
		Long:  "Merge pb file command",
	}

	flags := mergeCmd.PersistentFlags()
	flags.StringArrayVarP(&mergeInputs, "input", "i", []string{"./collect-signed.pb"}, "specify input file")
	flags.StringVarP(&mergeOutput, "output", "o", "./collect-signed-all.pb", "specify output file")

	mergeCmd.AddCommand(mergeSystemContractPayloadCMD())
	mergeCmd.AddCommand(mergeContractMgmtPayloadCMD())

	return mergeCmd
}

func mergeSystemContractPayloadCMD() *cobra.Command {
	configCmd := &cobra.Command{
		Use:   "config",
		Short: "Config command",
		Long:  "Config command",
		RunE: func(_ *cobra.Command, _ []string) error {
			return mergeSystemContractPayload()
		},
	}
	return configCmd
}

func mergeContractMgmtPayloadCMD() *cobra.Command {
	contractCmd := &cobra.Command{
		Use:   "contract",
		Short: "Contract command",
		Long:  "Contract command",
		RunE: func(_ *cobra.Command, _ []string) error {
			return mergeSystemContractPayload()
		},
	}
	return contractCmd
}

func mergeSystemContractPayload() error {
	if len(mergeInputs) == 0 {
		return fmt.Errorf("Input len invalid: %d", len(mergeInputs))
	}
	raw, err := ioutil.ReadFile(mergeInputs[0])
	if err != nil {
		return fmt.Errorf(LOAD_FILE_ERROR_FORMAT, mergeInputs[0], err)
	}
	allPayload := &sdkPbCommon.TxRequest{}
	if err := proto.Unmarshal(raw, allPayload); err != nil {
		return fmt.Errorf("SystemContractPayload unmarshal error: %s", err)
	}
	if len(allPayload.Endorsement) != 1 || allPayload.Endorsement[0] == nil {
		return fmt.Errorf(ENDORSEMENT_INVALID_FORMAT, mergeInputs[0])
	}
	allPayloadCopy := proto.Clone(allPayload)
	allPayloadCopy.(*sdkPbCommon.Payload).Endorsement = nil

	if len(mergeInputs) > 1 {
		allPayload, err = appendEndorsements(allPayloadCopy.(*sdkPbCommon.Payload), allPayload, mergeInputs[1:])
		if err != nil {
			return err
		}
	}

	payloadBytes, err := proto.Marshal(allPayload)
	if err != nil {
		return fmt.Errorf("SystemContractPayload marshal error: %s", err)
	}

	if err = ioutil.WriteFile(mergeOutput, payloadBytes, 0600); err != nil {
		return fmt.Errorf("Write to file %s error: %s", mergeOutput, err)
	}

	return nil
}

func appendEndorsements(payloadWithoutEndorse, allPayload *sdkPbCommon.Payload,
	mergeInputs []string) (*sdkPbCommon.Payload, error) {
	if len(mergeInputs) == 0 {
		return allPayload, nil
	}
	for _, payloadPath := range mergeInputs {
		raw, err := ioutil.ReadFile(payloadPath)
		if err != nil {
			return nil, fmt.Errorf(LOAD_FILE_ERROR_FORMAT, payloadPath, err)
		}
		payload := &sdkPbCommon.Payload{}
		if err := proto.Unmarshal(raw, payload); err != nil {
			return nil, fmt.Errorf("SystemContractPayload unmarshal error: %s", err)
		}
		if len(payload.Endorsement) != 1 || payload.Endorsement[0] == nil {
			return nil, fmt.Errorf(ENDORSEMENT_INVALID_FORMAT, payloadPath)
		}
		payloadCopy := proto.Clone(payload)
		payloadCopy.(*sdkPbCommon.Payload).Endorsement = nil
		if !checkPayloads(payladWithoutEndorse, payloadCopy) {
			return nil, fmt.Errorf("SystemContractPayload invalid: %s", payloadPath)
		}
		allPayload.Endorsement = append(allPayload.Endorsement, payload.Endorsement[0])
	}

	return allPayload, nil
}

func mergeContractMgmtPayload() error {
	//if len(mergeInputs) == 0 {
	//	return fmt.Errorf("Input len invalid: %d", len(mergeInputs))
	//}
	//raw, err := ioutil.ReadFile(mergeInputs[0])
	//if err != nil {
	//	return fmt.Errorf(LOAD_FILE_ERROR_FORMAT, mergeInputs[0], err)
	//}
	//allPayload := &sdkPbCommon.Payload{}
	//if err := proto.Unmarshal(raw, allPayload); err != nil {
	//	return fmt.Errorf("ContractMgmtPayload unmarshal error: %s", err)
	//}
	//if len(allPayload.Endorsement) != 1 || allPayload.Endorsement[0] == nil {
	//	return fmt.Errorf(ENDORSEMENT_INVALID_FORMAT, mergeInputs[0])
	//}
	//allPayloadCopy := proto.Clone(allPayload)
	//allPayloadCopy.(*sdkPbCommon.Payload).Endorsement = nil
	//
	//if len(mergeInputs) > 1 {
	//	allPayload, err = appendContractMgmtEndorsements(allPayloadCopy.(*sdkPbCommon.Payload), allPayload, mergeInputs[1:])
	//	if err != nil {
	//		return err
	//	}
	//}
	//
	//payloadBytes, err := proto.Marshal(allPayload)
	//if err != nil {
	//	return fmt.Errorf("ContractMgmtPayload marshal error: %s", err)
	//}
	//
	//if err = ioutil.WriteFile(mergeOutput, payloadBytes, 0600); err != nil {
	//	return fmt.Errorf("Write to file %s error: %s", mergeOutput, err)
	//}

	return nil
}

//func appendContractMgmtEndorsements(payladWithoutEndorse, allPayload *sdkPbCommon.Payload,
//	mergeInputs []string) (*sdkPbCommon.Payload, error) {
//	if len(mergeInputs) == 0 {
//		return allPayload, nil
//	}
//	for _, payloadPath := range mergeInputs {
//		raw, err := ioutil.ReadFile(payloadPath)
//		if err != nil {
//			return nil, fmt.Errorf(LOAD_FILE_ERROR_FORMAT, payloadPath, err)
//		}
//		payload := &sdkPbCommon.Payload{}
//		if err := proto.Unmarshal(raw, payload); err != nil {
//			return nil, fmt.Errorf("ContractMgmtPayload unmarshal error: %s", err)
//		}
//		if len(payload.Endorsement) != 1 || payload.Endorsement[0] == nil {
//			return nil, fmt.Errorf(ENDORSEMENT_INVALID_FORMAT, payloadPath)
//		}
//		payloadCopy := proto.Clone(payload)
//		payloadCopy.(*sdkPbCommon.Payload).Endorsement = nil
//		if !checkPayloads(payladWithoutEndorse, payloadCopy) {
//			return nil, fmt.Errorf("ContractMgmtPayload invalid: %s", payloadPath)
//		}
//		allPayload.Endorsement = append(allPayload.Endorsement, payload.Endorsement[0])
//	}
//
//	return allPayload, nil
//}

func checkPayloads(a, b proto.Message) bool {
	aBytes, err := proto.Marshal(a)
	if err != nil {
		return false
	}
	bBytes, err := proto.Marshal(b)
	if err != nil {
		return false
	}
	return bytes.Equal(aBytes, bBytes)
}
